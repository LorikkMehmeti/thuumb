import {
    stringToColor,
    adjust,
    colorTextFromBg,
    getFontSize,
    random,
    hexToHSL,
    getInitials
} from './functions.js'

const left = [
    'M0,321.267C59.432,312.319,110.267,282.298,163.544,254.48C222.377,223.761,310.316,213.802,328.214,149.891C346.844,83.366,258.478,32.511,244.659,-35.177C232.128,-96.555,278.608,-162.003,252.877,-219.119C225.041,-280.907,167.203,-329.008,102.794,-350.083C37.639,-371.402,-35.341,-361.635,-98.055,-333.946C-156.817,-308.002,-200.285,-257.16,-232.947,-201.85C-261.904,-152.816,-266.511,-95.796,-272.155,-39.13C-277.562,15.158,-276.391,67.694,-265.111,121.072C-251.087,187.433,-252.713,268.13,-198.585,309.004C-144.565,349.797,-66.938,331.346,0,321.267',
    'M0,619.792C112.901,636.487,195.474,515.23,290.374,451.831C383.354,389.714,501.068,351.684,551.049,251.656C601.484,150.72,579.973,30.325,556.091,-79.954C533.462,-184.446,490.896,-283.984,418.093,-362.28C346.84,-438.909,252.411,-488.35,151.301,-515.286C51.955,-541.752,-49.898,-533.156,-150.882,-513.858C-261.104,-492.794,-379.833,-477.134,-459.879,-398.487C-542.161,-317.643,-599.041,-199.329,-587.855,-84.521C-577.099,25.873,-470.211,95.775,-403.115,184.096C-351.682,251.799,-297.716,310.998,-239.974,373.407C-160.505,459.299,-115.757,602.675,0,619.792',
    'M0,525.46C99.147,525.21,197.554,489.526,274.109,426.522C346.413,367.017,383.615,277.188,410.622,187.525C434.979,106.658,423.571,23.909,420.802,-60.502C417.661,-156.269,437.944,-256.011,393.292,-340.79C343.655,-435.035,262.597,-516.721,162.03,-551.824C59.558,-587.592,-53.722,-567.825,-156.403,-532.66C-256.073,-498.526,-339.569,-433.595,-410.543,-355.737C-482.953,-276.303,-568.462,-189.086,-567.575,-81.605C-566.699,24.571,-458.95,93.37,-406.076,185.449C-359.38,266.769,-346.897,367.706,-274.999,427.907C-198.884,491.639,-99.274,525.71,0,525.46',
    'M0,402.437C94.078,392.658,186.149,458.057,276.599,430.397C378.945,399.099,485.505,339.351,527.79,241.034C569.975,142.95,507.027,34.969,492.142,-70.759C477.203,-176.871,503.663,-295.087,440.161,-381.402C375.494,-469.302,261.317,-503.085,155.24,-528.697C52.92,-553.402,-55.634,-562.036,-154.122,-524.891C-249.129,-489.058,-307.383,-400.498,-378.036,-327.57C-453.254,-249.929,-565.126,-190.459,-581.62,-83.624C-598.124,23.278,-506.41,112.356,-461.117,210.585C-416.021,308.387,-415.632,450.642,-316.197,492.013C-212.965,534.964,-111.212,413.996,0,402.437',
    'M0,479.73C90.866,503.922,194.429,476.043,269.81,419.833C343.577,364.827,371.237,269.946,398.991,182.213C424.023,103.087,434.291,21.4,421.811,-60.647C409.406,-142.202,380.806,-220.837,328.038,-284.246C274.614,-348.444,205.609,-406.067,123.177,-419.504C43.802,-432.443,-27.107,-377.773,-104.148,-354.696C-180.664,-331.777,-270.387,-339.516,-328.126,-284.323C-387.259,-227.798,-413.762,-141.191,-413.076,-59.391C-412.432,17.392,-365.098,83.018,-324.498,148.193C-288.512,205.962,-238.577,248.516,-190.97,297.156C-128.095,361.395,-86.862,456.604,0,479.73',
    'M0,606.705C111.775,610.102,193.848,508.465,287.346,447.119C379.849,386.426,514.576,355.299,545.206,248.987C576.348,140.9,461.034,46.803,434.153,-62.422C410.949,-156.705,445.847,-260.647,398.868,-345.621C347.043,-439.36,263.162,-516.864,162.567,-553.652C58.959,-591.541,-65.05,-603.847,-161.674,-550.611C-255.296,-499.028,-276.993,-377.955,-327.403,-283.696C-366.339,-210.893,-399.565,-139.894,-423.573,-60.901C-451.861,32.173,-508.238,126.164,-480.291,219.341C-451.632,314.891,-353.985,367.363,-276.337,429.988C-189.471,500.047,-111.546,603.315,0,606.705',
    'M0,638.299C116.345,617.042,172.179,486.28,267.648,416.468C355.354,352.332,478.358,336.651,537.316,245.384C599.139,149.681,622.773,24.532,591.631,-85.064C561.574,-190.84,463.691,-259.831,375.205,-325.117C301.29,-379.652,213.781,-402.046,125.877,-428.699C37.136,-455.606,-49.575,-494.255,-141.461,-481.773C-241.651,-468.163,-335.286,-423.239,-410.638,-355.82C-492.581,-282.505,-559.518,-190.992,-585.793,-84.224C-613.552,28.575,-604.779,148.615,-561.283,256.329C-516.626,366.919,-437.463,460.18,-338.863,527.28C-238.566,595.535,-119.343,660.104,0,638.299',
    'M0,428.861C99.203,422.262,196.716,484.035,291.216,453.141C396.93,418.581,495.607,348.421,547.291,249.939C599.961,149.577,613.021,23.468,572.203,-82.27C533.607,-182.251,404.445,-208.776,337.81,-292.714C266.513,-382.526,280.966,-550.109,172.132,-586.229C64.418,-621.978,-31.35,-501.544,-131.703,-448.539C-211.156,-406.573,-288.725,-368.253,-355.14,-307.731C-429.219,-240.225,-502.976,-171.05,-538.89,-77.481C-580.504,30.939,-615.86,153.801,-573.839,262.064C-531.289,371.69,-430.146,460.792,-317.226,493.614C-211.45,524.36,-109.911,436.172,0,428.861',
];

const right = [
    'M1280 1194.439C1388.372 1190.57 1497.132 1254.558 1598.075 1214.935 1705.656 1172.7069999999999 1815.3339999999998 1088.33 1838.681 975.141 1862.143 861.391 1758.652 764.5409999999999 1713.002 657.744 1680.163 580.917 1658.414 502.403 1608.101 435.699 1554.807 365.043 1498.635 289.393 1414.487 261.979 1329.495 234.29000000000002 1236.222 254.836 1152.986 287.428 1074.341 318.222 1017.5129999999999 381.084 957.79 440.804 893.45 505.142 807.184 560.164 790.7429999999999 649.655 774.194 739.731 848.789 817.677 872.289 906.1949999999999 901.996 1018.092 852.453 1171.345 946.9870000000001 1238.179 1040.295 1304.146 1165.801 1198.516 1280 1194.439',
    'M1280 1079.214C1346.23 1079.608 1397.163 1024.595 1450.637 985.517 1500.998 948.715 1554.6689999999999 913.969 1582.5059999999999 858.15 1610.843 801.328 1613.934 736.117 1606.455 673.063 1598.838 608.843 1578.914 546.418 1539.453 495.183 1498.527 442.046 1446.026 391.398 1380.084 379.146 1315.837 367.209 1259.891 421.932 1195.2069999999999 431.22 1114.859 442.757 1008.279 377.185 956.781 439.929 904.698 503.38599999999997 983.312 596.998 992.1569999999999 678.614 998.354 735.795 980.1089999999999 793.831 1000.946 847.44 1022.489 902.865 1064.917 945.502 1110.661 983.496 1161.571 1025.78 1213.821 1078.821 1280 1079.214',
    'M1280 1297.379C1389.702 1296.42 1493.903 1255.758 1586.3029999999999 1196.617 1678.826 1137.397 1769.395 1063.835 1806.4479999999999 960.421 1842.438 859.9739999999999 1798.7910000000002 753.204 1782.9859999999999 647.681 1767.286 542.856 1791.681 416.071 1714.1 343.85 1636.104 271.243 1509.888 312.218 1404.649 295.484 1315.544 281.315 1232.35 241.361 1142.882 253.01999999999998 1043.488 265.972 931.9549999999999 285.976 870.424 365.101 809.229 443.793 831.274 555.6279999999999 830.0450000000001 655.306 828.967 742.744 841.9839999999999 825.4110000000001 863.7049999999999 910.115 889.9639999999999 1012.517 892.832 1130.001 970.2339999999999 1202.005 1050.973 1277.113 1169.732 1298.3429999999998 1280 1297.379',
    'M1280 1229.1689999999999C1382.62 1226.758 1488.069 1233.091 1578.34 1184.226 1672.171 1133.434 1769.776 1057.721 1790.19 952.996 1810.414 849.2429999999999 1692.537 767.448 1680.042 662.483 1667.028 553.158 1788.138 425.357 1717.345 341.038 1646.988 257.238 1505.584 323.594 1396.1680000000001 324.369 1318.86 324.917 1245.67 329.73 1169.866 344.917 1086.569 361.605 996.496 363.496 930.976 417.569 860.662 475.599 808.836 560.213 799.153 650.865 789.592 740.374 851.947 817.2570000000001 879.117 903.077 910.929 1003.562 890.749 1131.9479999999999 972.514 1198.458 1054.073 1264.801 1174.894 1231.638 1280 1229.1689999999999',
    'M1280 1232.615C1374.321 1230.6399999999999 1435.987 1136.938 1518.131 1090.539 1606.76 1040.4769999999999 1746.761 1044.7350000000001 1781.809 949.169 1817.5720000000001 851.653 1711.024 760.592 1674.844 663.23 1647.524 589.71 1629.76 517.297 1595.1689999999999 446.905 1548.895 352.737 1536.993 216.606 1438.12 181.49400000000003 1340.53 146.837 1253.341 261.631 1153.787 290.159 1053.29 318.957 934.967 285.415 852.271 349.371 765.218 416.696 698.224 527.468 704.908 637.314 711.499 745.632 822.765 811.686 885.778 900.035 935.216 969.351 970.298 1045.747 1035.373 1100.647 1107.653 1161.625 1185.455 1234.594 1280 1232.615',
    'M1280 1128.3980000000001C1373.985 1137.422 1475.8 1199.24 1556.637 1150.455 1637.2440000000001 1101.809 1623.4859999999999 980.316 1665.216 895.922 1708.775 807.83 1815.22 742.1610000000001 1806.946 644.237 1798.6979999999999 546.617 1703.218 480.086 1625.089 420.979 1557.878 370.133 1469.783 368.649 1393.98 331.818 1297.517 284.948 1225.966 158.10699999999997 1120.163 175.644 1017.204 192.71000000000004 980.957 323.723 922.252 410.01 870.354 486.29200000000003 819.053 560.961 797.053 650.563 773.3109999999999 747.259 744.71 855.189 791.344 943.1610000000001 837.624 1030.465 943.124 1065.394 1035.52 1100.4189999999999 1113.805 1130.095 1196.662 1120.396 1280 1128.3980000000001',
    'M1280 1152.53C1370.452 1142.949 1465.817 1176.571 1546.778 1135.115 1630.76 1092.113 1685.538 1008.906 1726.491 923.906 1768.0529999999999 837.641 1782.664 743.64 1781.521 647.892 1780.242 540.765 1778.5819999999999 428.54 1719.509 339.163 1656.998 244.584 1562.0149999999999 152.70000000000005 1448.929 144.67999999999995 1336.665 136.71799999999996 1250.833 237.923 1156.45 299.229 1087.966 343.713 1037.834 404.377 972.893 453.89 886.396 519.8389999999999 750.944 536.838 711.736 638.296 672.863 738.888 736.258 849.771 782.202 947.337 827.7149999999999 1043.987 875.479 1155.049 974.2470000000001 1195.761 1071.378 1235.798 1175.525 1163.597 1280 1152.53',
    'M1280 1184.618C1365.512 1192.212 1434.506 1118.996 1504.242 1068.9279999999999 1570.608 1021.28 1647.863 977.505 1675.537 900.636 1702.641 825.348 1657.958 746.462 1648.9569999999999 666.952 1639.601 584.3050000000001 1674.6309999999999 488.078 1621.5810000000001 424.018 1568.55 359.981 1469.599 368.267 1388.076 351.927 1313.817 337.043 1237.868 307.991 1166.297 332.761 1095.81 357.155 1064.22 435.5 1007.303 483.707 936.691 543.513 831.481 566.164 791.942 649.828 749.199 740.272 729.563 864.015 789.846 943.846 851.97 1026.115 987.442 985.8 1079.971 1031.252 1156.942 1069.061 1194.58 1177.033 1280 1184.618'
];


const circles = document.getElementById('circles');
const box = document.querySelector('h1');
const wrapper = document.querySelector('.content-wrapper');
const titles = [
    'Learn Python Programming Masterclass',
    'React Native - The Practical Guide [2022 Edition]',
    'Unreal Engine C++ Developer: Learn C++ and Make Video Games',
    'Docker and Kubernetes: The Complete Guide',
    'SQL - MySQL for Data Analytics and Business Intelligence',
    'The Complete Cryptocurrency Course',
    'Microsoft Power BI - A Complete Introduction',
    'Modern JavaScript (Complete guide, from Novice to Ninja)',
    'Learn JavaScript: Full-Stack from Scratch',
    'The Complete Copywriting Course : Write to Sell Like a Pro',
    'Music Production in Logic Pro X',
    'Game Music Composition',
    'Adobe Premiere Pro CC Masterclass: Video Editing',
    'Video Editing in DaVinci Resolve 17: Beginner to Advanced',
    'Affinity Photo: Solid Foundations',
    'Complete C# Unity Game Developer 2D',
    'Deep Learning A-Z: Hands-On Artificial Neural Networks'
];
if (box) {
    box.innerText = random(titles);
}

changeColors();




function getRandomInt(minimum, maximum) {
    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum
}

function changeColors() {
    if (!box) {
        return
    }
    const text = box.innerText.trim().replace(/[^\w ]/, '').toLowerCase();
    
    const _color = stringToColor(text);
    // const lighten_color = adjust(_color, 30);
    // const darken_color = adjust(_color, -100);
    const firstc = document.getElementById('first-color');
    const secondc = document.getElementById('second-color');
    firstc.setAttribute('stop-color', colorTextFromBg(_color, '#fff', '#000'));
    secondc.setAttribute('stop-color', _color);
}

const colors = [
    "eb445a", "d57eeb",
    "764ba2", "a7a6cb",
    "5260ff", "2dd36f",
    "ffc409", "3880ff",
    "f12711", "654ea3",
    "FF416C", "ff9966",
    "32CCBC", "9F44D3",
    "000DFF", "49C628"
];

const name00 = document.getElementById('name00');
const avatar00 = document.getElementById('avatar00');

function getUser() {
    if(!box) { return }
    fetch('https://randomuser.me/api/?results=1')
        .then(response => response.json())
        .then(data => {
            const user = data.results[0];
            const initials = getInitials(user.name.first + ' ' + user.name.last);
            const name = user.name.first + ' ' + user.name.last;
            name00.innerText = name;
            avatar00.innerText = initials;
            const rn = stringToColor(name) || colors[name?.length % colors?.length];
            const clt = adjust(rn, 30);
            const clo = adjust(rn, -60);
            const clc = colorTextFromBg(clo, '#fff', '#000');
            const clr = clc === '#fff' ? `rgba(255,255,255, .1)` : `rgba(0,0,0, .1)`;
            avatar00.style = `background-image: linear-gradient(150deg, ${clt} 00%, ${clo} 100%); color: ${clc}; --color: ${clr}`;

        })
}

getUser();
if (box) {
    box.addEventListener('keydown', (e) => {
        if (box.innerText.trim().length >= 100) {
            e.preventDefault();
        }
    })
    box.addEventListener('input', (e) => {
        box.style = `--font-size: ${getFontSize(box.textContent.length) ?? '6rem'}`;
        box.setAttribute('data-text', box.textContent);
        changeColors();
    });
    box.addEventListener("paste", function (e) {
        // cancel paste
        e.preventDefault();

        // get text representation of clipboard
        var text = (e.originalEvent || e).clipboardData.getData('text/plain');
        // insert text manually
        document.execCommand("insertHTML", false, text);
    });
    box.style = `--font-size: ${getFontSize(box.textContent.length)}`;
}

const node = document.getElementById('capture');

function capture() {
    console.log(node);
     var temp = document.getElementsByTagName("template")[0];
    var clon = temp.content.cloneNode(true);
    document.body.appendChild(clon);
    return;
    domtoimage.toPng(node)
        .then(function (dataUrl) {
            console.log(dataUrl);
            const img = new Image();
            img.src = dataUrl;
            const nd = document.getElementById('image-rendered');
            nd.innerHTML = '';
            nd.appendChild(img);
            console.log(dataUrl)
        })
        .catch(function (error) {
            console.error('oops, something went wrong!', error);
        });

    return;
    html2canvas(document.querySelector("#capture"), {
        scale: 1.2
    }).then(canvas => {
        const blob = canvas.toDataURL();
        console.log(blob);
        return;
        const a = document.createElement('a');
        a.href = blob;
        a.download = box.textContent;
        a.click();
    });
}

const btn = document.getElementById('capture-btn');
btn.addEventListener('click', () => {
    capture();
});

// box.style.lineHeight = getFontSize(box.textContent.length)